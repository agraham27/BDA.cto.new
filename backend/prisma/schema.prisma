generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  ARTICLE
  VIDEO
  QUIZ
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum FileCategory {
  VIDEO
  DOCUMENT
  IMAGE
  OTHER
}

enum FileVisibility {
  PUBLIC
  PRIVATE
  PROTECTED
}

model User {
  id                              String        @id @default(cuid())
  email                           String        @unique
  passwordHash                    String
  firstName                       String?
  lastName                        String?
  avatarUrl                       String?
  role                            UserRole      @default(STUDENT)
  isActive                        Boolean       @default(true)
  isEmailVerified                 Boolean       @default(false)
  emailVerifiedAt                 DateTime?
  emailVerificationTokenHash      String?
  emailVerificationTokenExpiresAt DateTime?
  passwordResetTokenHash          String?
  passwordResetTokenExpiresAt     DateTime?
  lastLoginAt                     DateTime?
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @updatedAt

  instructor      Instructor?
  enrollments     Enrollment[]
  progresses      Progress[]
  quizSubmissions QuizSubmission[]
  blogPosts       BlogPost[]   @relation("UserPosts")
  uploadedFiles File[]       @relation("UploadedFiles")
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]

  @@index([role])
  @@index([isEmailVerified])
  @@index([emailVerificationTokenHash])
  @@index([passwordResetTokenHash])
}

model Instructor {
  id          String   @id @default(cuid())
  userId      String   @unique
  headline    String?
  bio         String?  @db.Text
  expertise   String[] @default([])
  website     String?
  socialLinks Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses   Course[]
  blogPosts BlogPost[] @relation("InstructorPosts")
}

model Course {
  id                String       @id @default(cuid())
  instructorId      String
  title             String
  slug              String       @unique
  description       String?      @db.Text
  status            CourseStatus @default(DRAFT)
  level             CourseLevel  @default(ALL_LEVELS)
  language          String       @default("en")
  thumbnailUrl      String?
  trailerUrl        String?
  publishedAt       DateTime?
  estimatedDuration Int?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  instructor  Instructor       @relation(fields: [instructorId], references: [id], onDelete: Restrict)
  sections    Section[]
  enrollments Enrollment[]
  categories  CourseCategory[]
  files       File[]           @relation("CourseFiles")

  @@index([instructorId])
  @@index([status])
}

model Section {
  id          String        @id @default(cuid())
  courseId    String
  title       String
  description String?       @db.Text
  position    Int
  status      ContentStatus @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@unique([courseId, position])
  @@index([courseId])
  @@index([status])
}

model Lesson {
  id          String        @id @default(cuid())
  sectionId   String
  title       String
  slug        String?       @unique
  summary     String?
  content     String?       @db.Text
  videoUrl    String?
  resourceUrl String?
  duration    Int?
  type        LessonType    @default(ARTICLE)
  position    Int
  status      ContentStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  section         Section          @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  quiz            Quiz?
  progresses      Progress[]
  quizSubmissions QuizSubmission[]
  files           File[]           @relation("LessonFiles")

  @@unique([sectionId, position])
  @@index([sectionId])
  @@index([status])
}

model Quiz {
  id           String   @id @default(cuid())
  lessonId     String   @unique
  title        String
  description  String?  @db.Text
  passingScore Int      @default(70)
  timeLimit    Int?
  questions    Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  lesson      Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  submissions QuizSubmission[]
}

model Enrollment {
  id          String           @id @default(cuid())
  userId      String
  courseId    String
  status      EnrollmentStatus @default(ACTIVE)
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?
  progress    Float            @default(0)

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progresses      Progress[]       @relation("EnrollmentProgress")
  quizSubmissions QuizSubmission[]

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([status])
}

model Progress {
  id           String         @id @default(cuid())
  userId       String
  lessonId     String
  enrollmentId String?
  status       ProgressStatus @default(NOT_STARTED)
  startedAt    DateTime?
  completedAt  DateTime?
  updatedAt    DateTime       @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment Enrollment? @relation("EnrollmentProgress", fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([status])
  @@index([enrollmentId])
}

model QuizSubmission {
  id           String   @id @default(cuid())
  userId       String
  quizId       String
  lessonId     String
  enrollmentId String?
  answers      Json
  results      Json
  score        Int
  passed       Boolean
  completedAt  DateTime @default(now())
  timeSpent    Int?
  createdAt    DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz       Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  lesson     Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
  @@index([lessonId])
  @@index([enrollmentId])
  @@index([passed])
}

model BlogPost {
  id           String        @id @default(cuid())
  authorId     String
  instructorId String?
  title        String
  slug         String        @unique
  excerpt      String?
  content      String        @db.Text
  status       ContentStatus @default(DRAFT)
  featured     Boolean       @default(false)
  publishedAt  DateTime?
  tags         String[]      @default([])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  author     User               @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  instructor Instructor?        @relation("InstructorPosts", fields: [instructorId], references: [id], onDelete: SetNull)
  categories BlogPostCategory[]
  files      File[]             @relation("BlogPostFiles")

  @@index([status])
  @@index([featured])
  @@index([authorId])
  @@index([instructorId])
}

model RefreshToken {
  id                String   @id @default(cuid())
  tokenHash         String   @unique
  userId            String
  expiresAt         DateTime
  revokedAt         DateTime?
  replacedByTokenId String?
  createdAt         DateTime @default(now())
  ipAddress         String?
  userAgent         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseCategories   CourseCategory[]
  blogPostCategories BlogPostCategory[]
}

model CourseCategory {
  courseId   String
  categoryId String
  assignedAt DateTime @default(now())

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([courseId, categoryId])
  @@index([categoryId])
}

model BlogPostCategory {
  blogPostId String
  categoryId String
  assignedAt DateTime @default(now())

  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([blogPostId, categoryId])
  @@index([categoryId])
}

model File {
  id               String         @id @default(cuid())
  uploaderId       String?
  courseId         String?
  lessonId         String?
  blogPostId       String?
  filename         String
  originalFilename String
  mimeType         String
  size             Int
  path             String
  url              String
  key              String?
  category         FileCategory   @default(OTHER)
  visibility       FileVisibility @default(PRIVATE)
  metadata         Json?
  checksum         String?
  duration         Int?
  width            Int?
  height           Int?
  isProcessed      Boolean        @default(false)
  processedAt      DateTime?
  expiresAt        DateTime?
  accessCount      Int            @default(0)
  lastAccessedAt   DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  uploader User?     @relation("UploadedFiles", fields: [uploaderId], references: [id], onDelete: SetNull)
  course   Course?   @relation("CourseFiles", fields: [courseId], references: [id], onDelete: Cascade)
  lesson   Lesson?   @relation("LessonFiles", fields: [lessonId], references: [id], onDelete: Cascade)
  blogPost BlogPost? @relation("BlogPostFiles", fields: [blogPostId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([lessonId])
  @@index([blogPostId])
  @@index([uploaderId])
  @@index([category])
  @@index([visibility])
  @@index([expiresAt])
}
